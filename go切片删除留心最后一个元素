go 删除切片最后一个元素时报错，情景如下：
  那段时间测试系统时，发现可以正常跑1天或者几天，但是总会因为某个错误出错。当时开的是screen后台运行，出错的时间又散布在凌晨半夜。
  这样在系统出错后，screen长时间无输出内容后，导致直接退出screen，因此无法看到当时的错误输入。
  系统的日志是有的，但是实在是不知道到底是哪里出错，在哪里再新增日志。所以只有白天早上来运行程序，观察是否会出错。
  终于在有天中午系统再次报错停止运行，看到错误信息输出为切片越界。再进一步定位代码位置，结果发现是删除切片操作时报错。
  在在分析和测试排查后，原因定位为因为数据较多，小概率才会删除到一个切片的最后一个元素，导致程序错误退出。
  可以见下面测试程序：
func main() {
	slice := []int{2, 1, 2, 1, 3, 4, 0, 6, 7, 2, 9, 9, 4, 2, 0}
	for i, n := range slice {
		if n == 0 {
			slice = append(slice[:i], slice[i+1:]...)
		}
	}
	fmt.Printf("%v\n", slice)
}
  这个程序，看起来是删除切片中为0的元素，但是运行结果后会发现
panic: runtime error: slice bounds out of range
  就是因为切片发生变化，要删除元素且在最后一位存在造成的
  如果在程序中加入切片长度的判断，那么程序将不会报错，得到我们想要的结果
func main() {
	slice := []int{2, 1, 2, 1, 3, 4, 0, 6, 7, 2, 9, 9, 4, 2, 0}
	for i, n := range slice {
		if i < len(slice) {
			if n == 0 {
				slice = append(slice[:i], slice[i+1:]...)
			}
		}
	}
	fmt.Printf("%v\n", slice)
}
  输出结果为：
  [2 1 2 1 3 4 6 7 2 9 9 4 2]
  
  在后续进行go语言切片的操作时，需要留心这下点。
  
